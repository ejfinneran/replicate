#!/usr/bin/env ruby
#/ Usage: replicate --dump dumpscript.rb > objects.dump
#/        replicate [-r <lib>] --dump "<ruby>" [-- <argv>...] > objects.dump
#/        replicate [-r <lib>] --load < objects.dump
#/ Dump and load objects between environments.
#
#/ The --dump form writes to stdout the objects dumped by the script or
#/ ruby expression(s) given. Dump scripts are normal Ruby source files but
#/ must call dump(object) on one or more objects. When a Ruby expression is
#/ given, all resulting objects are dumped automatically.
#/
#/ Dump scripts have access to any additional <argv> provided via the normal
#/ system ARGV array. This can be used to pass arguments to dump scripts.
#/
#/ The --load form reads dump data from stdin and creates objects under the
#/ current environment.
#/
#/ Mode selection:
#/   -d, --dump           Dump the repository and all related objects to stdout.
#/   -l, --load           Load dump file data from stdin.
#/
#/ Options:
#/   -r, --require        Require the library. Often used with 'config/environment'.
#/   -i, --keep-id        Use replicated ids when loading dump file.
#/   -b, --base64         Use Base64 encoding when dumping and loading
#/   -h, --heroku         Heroku friendly settings. Base64 encoding and no logging to stderr (Equivilant to -b -q options)
#/   -f, --force          Allow loading in production environments.
#/   -v, --verbose        Write more status output.
#/   -q, --quiet          Write less status output.
$stderr.sync = true
$stdout = $stderr

require 'optparse'

# default options
mode     = nil
verbose  = false
base64   = false
quiet    = false
keep_id  = false
out      = STDOUT
force    = false

# parse arguments
file = __FILE__
usage = lambda { exec "grep ^#/<'#{file}'|cut -c4-" }
original_argv = ARGV.dup
ARGV.options do |opts|
  opts.on("-d", "--dump")      { mode = :dump }
  opts.on("-l", "--load")      { mode = :load }
  opts.on("-r", "--require=f") { |file| require file }
  opts.on("-v", "--verbose")   { verbose = true }
  opts.on("-b", "--base64")    { base64 = true }
  opts.on("-h", "--heroku")    { base64 = true; quiet = true }
  opts.on("-q", "--quiet")     { quiet = true }
  opts.on("-i", "--keep-id")   { keep_id = true }
  opts.on("--force")           { force = true }
  opts.on_tail("-h", "--help", &usage)
  opts.parse!
end

# load replicate lib and setup AR
require 'replicate'
if defined?(ActiveRecord::Base)
  require 'replicate/active_record'
  ActiveRecord::Base.replicate_id = keep_id
  ActiveRecord::Base.connection.enable_query_cache!
end

# dump mode means we're reading records from the database here and writing to
# stdout. the database should not be modified at all by this operation.
if mode == :dump
  script = ARGV.shift
  usage.call if script.empty?
  serializer = Replicate::Serializer.new
  if base64
    serializer.mode = :base64
  end
  Replicate::Dumper.new do |dumper|
    dumper.marshal_to serializer
    dumper.log_to $stderr, verbose, quiet
    if script == '-'
      code = $stdin.read
      objects = dumper.instance_eval(code, '<stdin>', 0)
    elsif File.exist?(script)
      dumper.load_script script
    else
      objects = dumper.instance_eval(script, '<argv>', 0)
      dumper.dump objects
    end
    serializer.flush
  end

# load mode means we're reading objects from stdin and creating them under
# the current environment.
elsif mode == :load
  require 'base64'
  if base64
    # Remove newlines and other characters that Base64 doesn't like
    input = $stdin.readlines.map(&:strip)

    begin
      data = Base64.strict_decode64(input.join)
    rescue ArgumentError
      # Heroku injects lines into STDOUT so we need to account for that here:
      if input.size > 1
        ignored_line = input.shift
        $stderr.puts "Ignoring line: #{ignored_line}"
        retry
      else
        abort "Check that the input is actually Base64 encoded"
      end
    end

    io = StringIO.new(data)
  else
    io = $stdin
  end
  if Replicate.production_environment? && !force
    abort "error: refusing to load in production environment\n" +
          "       manual override: #{File.basename($0)} --force #{original_argv.join(' ')}"
  else
    Replicate::Loader.new do |loader|
      loader.log_to $stderr, verbose, quiet
      loader.read io
    end
  end

# mode not set means no -l or -d arg was given. show usage and bail.
else
  usage.call
end
